package io.github.zapproject.jzap;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Provides an interface to the Dispatch contract for enabling data queries and responses
 */
@SuppressWarnings("rawtypes")
public class Dispatch extends BaseContract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b506040516200430a3803806200430a8339818101604052602081101561003557600080fd5b810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506141ef806200011b6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637237dc0b116100b85780639cb8a26a1161007c5780639cb8a26a14610966578063dc7317c914610970578063e00dbb4114610a17578063ef05ab0b14610a61578063f2fde38b14610afc578063fedea28814610b4057610142565b80637237dc0b146107565780637de7cc66146107845780638da5cb5b146108905780638ed20021146108da578063937bbc4a1461092457610142565b80633b90dfa81161010a5780633b90dfa8146104725780634d655aff146105b75780635c42d079146106015780635c622a0e1461066f5780636843581c146106b15780636e5ecdff1461074c57610142565b8063027521ce146101475780630cbe69a11461018957806325df1e77146102245780633485d34c1461029257806337a8c5601461042c575b600080fd5b6101736004803603602081101561015d57600080fd5b8101908080359060200190929190505050610c30565b6040518082815260200191505060405180910390f35b61020a6004803603604081101561019f57600080fd5b8101908080359060200190929190803590602001906401000000008111156101c657600080fd5b8201836020820111156101d857600080fd5b803590602001918460208302840111640100000000831117156101fa57600080fd5b9091929391929390505050610d5d565b604051808215151515815260200191505060405180910390f35b6102506004803603602081101561023a57600080fd5b8101908080359060200190929190505050610f18565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610412600480360360a08110156102a857600080fd5b8101908080359060200190929190803590602001906401000000008111156102cf57600080fd5b8201836020820111156102e157600080fd5b8035906020019184600183028401116401000000008311171561030357600080fd5b90919293919293908035906020019064010000000081111561032457600080fd5b82018360208201111561033657600080fd5b8035906020019184600183028401116401000000008311171561035857600080fd5b90919293919293908035906020019064010000000081111561037957600080fd5b82018360208201111561038b57600080fd5b803590602001918460018302840111640100000000831117156103ad57600080fd5b9091929391929390803590602001906401000000008111156103ce57600080fd5b8201836020820111156103e057600080fd5b8035906020019184600183028401116401000000008311171561040257600080fd5b9091929391929390505050611045565b604051808215151515815260200191505060405180910390f35b6104586004803603602081101561044257600080fd5b8101908080359060200190929190505050611338565b604051808215151515815260200191505060405180910390f35b61059d6004803603608081101561048857600080fd5b8101908080359060200190929190803590602001906401000000008111156104af57600080fd5b8201836020820111156104c157600080fd5b803590602001918460018302840111640100000000831117156104e357600080fd5b90919293919293908035906020019064010000000081111561050457600080fd5b82018360208201111561051657600080fd5b8035906020019184600183028401116401000000008311171561053857600080fd5b90919293919293908035906020019064010000000081111561055957600080fd5b82018360208201111561056b57600080fd5b8035906020019184600183028401116401000000008311171561058d57600080fd5b909192939192939050505061147b565b604051808215151515815260200191505060405180910390f35b6105bf611704565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61062d6004803603602081101561061757600080fd5b810190808035906020019092919050505061172a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61069b6004803603602081101561068557600080fd5b8101908080359060200190929190505050611857565b6040518082815260200191505060405180910390f35b610732600480360360408110156106c757600080fd5b8101908080359060200190929190803590602001906401000000008111156106ee57600080fd5b82018360208201111561070057600080fd5b8035906020019184600183028401116401000000008311171561072257600080fd5b9091929391929390505050611984565b604051808215151515815260200191505060405180910390f35b610754611b39565b005b6107826004803603602081101561076c57600080fd5b8101908080359060200190929190505050611c06565b005b61087a6004803603608081101561079a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156107d757600080fd5b8201836020820111156107e957600080fd5b8035906020019184600183028401116401000000008311171561080b57600080fd5b9091929391929390803590602001909291908035906020019064010000000081111561083657600080fd5b82018360208201111561084857600080fd5b8035906020019184602083028401116401000000008311171561086a57600080fd5b9091929391929390505050611f0b565b6040518082815260200191505060405180910390f35b6108986124a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108e26124ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109506004803603602081101561093a57600080fd5b81019080803590602001909291905050506124f0565b6040518082815260200191505060405180910390f35b61096e61261d565b005b61099c6004803603602081101561098657600080fd5b81019080803590602001909291905050506126b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109dc5780820151818401526020810190506109c1565b50505050905090810190601f168015610a095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610a1f61289b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ae260048036036040811015610a7757600080fd5b810190808035906020019092919080359060200190640100000000811115610a9e57600080fd5b820183602082011115610ab057600080fd5b80359060200191846020830284011164010000000083111715610ad257600080fd5b90919293919293905050506128c1565b604051808215151515815260200191505060405180910390f35b610b3e60048036036020811015610b1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a7c565b005b610c1660048036036060811015610b5657600080fd5b810190808035906020019092919080359060200190640100000000811115610b7d57600080fd5b820183602082011115610b8f57600080fd5b80359060200191846001830284011164010000000083111715610bb157600080fd5b909192939192939080359060200190640100000000811115610bd257600080fd5b820183602082011115610be457600080fd5b80359060200191846001830284011164010000000083111715610c0657600080fd5b9091929391929390505050612bcd565b604051808215151515815260200191505060405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ecb0d648360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f63616e63656c426c6f636b000000000000000000000000000000000000000000815250600b01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610d1b57600080fd5b505afa158015610d2f573d6000803e3d6000fd5b505050506040513d6020811015610d4557600080fd5b81019080805190602001909291905050509050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16610d7f8561172a565b73ffffffffffffffffffffffffffffffffffffffff16141580610da85750610da684612dec565b155b15610db257600080fd5b610dbb84611338565b15610e6f57610dc984610f18565b73ffffffffffffffffffffffffffffffffffffffff166363b41fe98585856040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b50505050610f0d565b3373ffffffffffffffffffffffffffffffffffffffff16610e8f85610f18565b73ffffffffffffffffffffffffffffffffffffffff16857f92d44f3550f6aeaab26241971266a417e4385691402c27c5a1bf69b2c19210c6868660405180806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050935050505060405180910390a45b600190509392505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ecb0d648360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7375627363726962657200000000000000000000000000000000000000000000815250600a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d602081101561102d57600080fd5b81019080805190602001909291905050509050919050565b60003373ffffffffffffffffffffffffffffffffffffffff166110678b61172a565b73ffffffffffffffffffffffffffffffffffffffff16141580611090575061108e8a612dec565b155b1561109a57600080fd5b6110a38a611338565b156111f0576110b18a610f18565b73ffffffffffffffffffffffffffffffffffffffff1663a267cf078b8b8b8b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401808a81526020018060200180602001806020018060200185810385528d8d82818152602001925080828437600081840152601f19601f82011690508083019250505085810384528b8b82818152602001925080828437600081840152601f19601f8201169050808301925050508581038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508581038252878782818152602001925080828437600081840152601f19601f8201169050808301925050509d5050505050505050505050505050600060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b50505050611327565b3373ffffffffffffffffffffffffffffffffffffffff166112108b610f18565b73ffffffffffffffffffffffffffffffffffffffff168b7f5e141f0f2db9b2fa0d44e60384103676292be03cac75671374ea23e719dcd64b8c8c8c8c8c8c8c8c604051808060200180602001806020018060200185810385528d8d82818152602001925080828437600081840152601f19601f82011690508083019250505085810384528b8b82818152602001925080828437600081840152601f19601f8201169050808301925050508581038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508581038252878782818152602001925080828437600081840152601f19601f8201169050808301925050509c5050505050505050505050505060405180910390a45b600190509998505050505050505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ecb0d648460405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f6f6e636861696e53756273637269626572000000000000000000000000000000815250601101915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d602081101561144e57600080fd5b8101908080519060200190929190505050905060018114611470576000611473565b60015b915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff1661149d8961172a565b73ffffffffffffffffffffffffffffffffffffffff161415806114c657506114c488612dec565b155b156114d057600080fd5b6114d988611338565b156115f2576114e788610f18565b73ffffffffffffffffffffffffffffffffffffffff1663d936a327898989898989896040518863ffffffff1660e01b81526004018088815260200180602001806020018060200184810384528a8a82818152602001925080828437600081840152601f19601f8201169050808301925050508481038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508481038252868682818152602001925080828437600081840152601f19601f8201169050808301925050509a5050505050505050505050600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050506116f5565b3373ffffffffffffffffffffffffffffffffffffffff1661161289610f18565b73ffffffffffffffffffffffffffffffffffffffff16897f5d15dbf2e2e3132b5a4fa750a08fbdc88bde1149224a6b1de740e50804707ef28a8a8a8a8a8a6040518080602001806020018060200184810384528a8a82818152602001925080828437600081840152601f19601f8201169050808301925050508481038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508481038252868682818152602001925080828437600081840152601f19601f820116905080830192505050995050505050505050505060405180910390a45b60019050979650505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ecb0d648360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f70726f7669646572000000000000000000000000000000000000000000000000815250600801915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561181557600080fd5b505afa158015611829573d6000803e3d6000fd5b505050506040513d602081101561183f57600080fd5b81019080805190602001909291905050509050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ecb0d648360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7374617475730000000000000000000000000000000000000000000000000000815250600601915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561194257600080fd5b505afa158015611956573d6000803e3d6000fd5b505050506040513d602081101561196c57600080fd5b81019080805190602001909291905050509050919050565b60003373ffffffffffffffffffffffffffffffffffffffff166119a68561172a565b73ffffffffffffffffffffffffffffffffffffffff161415806119cf57506119cd84612dec565b155b156119d957600080fd5b6119e284611338565b15611a93576119f084610f18565b73ffffffffffffffffffffffffffffffffffffffff1663b69a375d8585856040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b50505050611b2e565b3373ffffffffffffffffffffffffffffffffffffffff16611ab385610f18565b73ffffffffffffffffffffffffffffffffffffffff16857f61ca5cd516a9a4012e4c147542d38223206ca531953abcb3272f579768d9dfb0868660405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a45b600190509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bfc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4572726f723a20436f6f7264696e61746f72204f6e6c792046756e6374696f6e81525060200191505060405180910390fd5b611c04613276565b565b6000611c1182610f18565b90506000611c1e8361172a565b90506000611c2b846124f0565b90503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611cce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4572726f723a2057726f6e67207375627363726962657200000000000000000081525060200191505060405180910390fd5b60006002811115611cdb57fe5b611ce485611857565b6002811115611cef57fe5b6002811115611cfa57fe5b14611d6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4572726f723a205175657279206973206e6f742070656e64696e67000000000081525060200191505060405180910390fd5b611d7884600161351f565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6dfac2584848460016040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050602060405180830381600087803b158015611e5e57600080fd5b505af1158015611e72573d6000803e3d6000fd5b505050506040513d6020811015611e8857600080fd5b810190808051906020019092919050505050611ea38461172a565b73ffffffffffffffffffffffffffffffffffffffff16611ec285610f18565b73ffffffffffffffffffffffffffffffffffffffff16857f4030457f4368d74748ca5f9c90692bd6c8a018884ddca38fcbce9e02179e777e60405160405180910390a450505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbee3694338a886040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d602081101561201357600080fd5b81019080805190602001909291905050509050600061203189613973565b9050600061203e33613973565b90506001831061244757600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316614c98338c8a60016040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050602060405180830381600087803b15801561212e57600080fd5b505af1158015612142573d6000803e3d6000fd5b505050506040513d602081101561215857600080fd5b81019080805190602001909291905050505043428a8a338e60405160200180878152602001868152602001858580828437808301925050508373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140196505050505050506040516020818303038152906040528051906020012060001c935061226f848b338a8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086613986565b8115612364578973ffffffffffffffffffffffffffffffffffffffff1663de261583858b8b8b8b8b886040518863ffffffff1660e01b8152600401808881526020018060200186815260200180602001841515151581526020018381038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508381038252868682818152602001925060200280828437600081840152601f19601f8201169050808301925050509950505050505050505050600060405180830381600087803b15801561234757600080fd5b505af115801561235b573d6000803e3d6000fd5b50505050612442565b3373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16857f69741cc3ec0270f258feb6b53b42ef1e7d2251a3c8eea4f6ba1f72bd4b7beba78c8c8c8c8c89604051808060200186815260200180602001841515151581526020018381038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508381038252868682818152602001925060200280828437600081840152601f19601f8201169050808301925050509850505050505050505060405180910390a45b612498565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806141996022913960400191505060405180910390fd5b5050509695505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6ed563e8360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f656e64706f696e74000000000000000000000000000000000000000000000000815250600801915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156125db57600080fd5b505afa1580156125ef573d6000803e3d6000fd5b505050506040513d602081101561260557600080fd5b81019080805190602001909291905050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461267657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663986e791a8360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7573657251756572790000000000000000000000000000000000000000000000815250600901915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561279b57600080fd5b505afa1580156127af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156127d957600080fd5b81019080805160405193929190846401000000008211156127f957600080fd5b8382019150602082018581111561280f57600080fd5b825186600182028301116401000000008211171561282c57600080fd5b8083526020830192505050908051906020019080838360005b83811015612860578082015181840152602081019050612845565b50505050905090810190601f16801561288d5780820380516001836020036101000a031916815260200191505b506040525050509050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff166128e38561172a565b73ffffffffffffffffffffffffffffffffffffffff1614158061290c575061290a84612dec565b155b1561291657600080fd5b61291f84611338565b156129d35761292d84610f18565b73ffffffffffffffffffffffffffffffffffffffff166399ff48af8585856040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b1580156129b657600080fd5b505af11580156129ca573d6000803e3d6000fd5b50505050612a71565b3373ffffffffffffffffffffffffffffffffffffffff166129f385610f18565b73ffffffffffffffffffffffffffffffffffffffff16857f9f77e7a9a5b13a5eb3acd7d32b8bffc55d7eb27f4ac09a5b804feaf2bab4c74d868660405180806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050935050505060405180910390a45b600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ad557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b0f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003373ffffffffffffffffffffffffffffffffffffffff16612bef8761172a565b73ffffffffffffffffffffffffffffffffffffffff16141580612c185750612c1686612dec565b155b15612c2257600080fd5b612c2b86611338565b15612d1057612c3986610f18565b73ffffffffffffffffffffffffffffffffffffffff1663f5795cd587878787876040518663ffffffff1660e01b81526004018086815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b158015612cf357600080fd5b505af1158015612d07573d6000803e3d6000fd5b50505050612ddf565b3373ffffffffffffffffffffffffffffffffffffffff16612d3087610f18565b73ffffffffffffffffffffffffffffffffffffffff16877ff34afe5c6e139b15c1ff3b929a198532242d2d8727db2099925e4e2d8a8fc681888888886040518080602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a45b6001905095945050505050565b600080612df883611857565b6002811115612e0357fe5b905060016002811115612e1257fe5b816002811115612e1e57fe5b1415612e92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4572726f723a2053746174757320616c72656164792066756c66696c6c65640081525060200191505060405180910390fd5b6000612e9d84610f18565b90506000612eaa8561172a565b90506000612eb7866124f0565b9050600280811115612ec557fe5b846002811115612ed157fe5b14156130e3576000612ee287610c30565b9050804314612f59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4572726f723a2043616e63656c2069676e6f726564000000000000000000000081525060200191505060405180910390fd5b612f6487600061351f565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316614c9885858560016040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050602060405180830381600087803b15801561304a57600080fd5b505af115801561305e573d6000803e3d6000fd5b505050506040513d602081101561307457600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16887f01aa7d984ab9ef683cf842c6260f8c3d4e2c2c4a32bfa5120bf0f6bcd51225f060405160405180910390a4505b6130ec8661407e565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b058aa784848460016040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050602060405180830381600087803b1580156131d257600080fd5b505af11580156131e6573d6000803e3d6000fd5b505050506040513d60208110156131fc57600080fd5b810190808051906020019092919050505050808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd2acd679e4b12e04dac69f514df2934d7bdb622acd5b5ebaea14f3dd70c3d58a60405160405180910390a46001945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663358177736040518163ffffffff1660e01b81526004018080602001828103825260088152602001807f444154414241534500000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b15801561331c57600080fd5b505afa158015613330573d6000803e3d6000fd5b505050506040513d602081101561334657600080fd5b8101908080519060200190929190505050905080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663358177736040518163ffffffff1660e01b81526004018080602001828103825260078152602001807f424f4e444147450000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b15801561343e57600080fd5b505afa158015613452573d6000803e3d6000fd5b505050506040513d602081101561346857600080fd5b8101908080519060200190929190505050600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b801561374b57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f63616e63656c426c6f636b000000000000000000000000000000000000000000815250600b0191505060405160208183030381529060405280519060200120436040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561361857600080fd5b505af115801561362c573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7374617475730000000000000000000000000000000000000000000000000000815250600601915050604051602081830303815290604052805190602001206002808111156136f157fe5b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561372e57600080fd5b505af1158015613742573d6000803e3d6000fd5b5050505061396f565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f63616e63656c426c6f636b000000000000000000000000000000000000000000815250600b019150506040516020818303038152906040528051906020012060006040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561383f57600080fd5b505af1158015613853573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8360405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7374617475730000000000000000000000000000000000000000000000000000815250600601915050604051602081830303815290604052805190602001206000600281111561391957fe5b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561395657600080fd5b505af115801561396a573d6000803e3d6000fd5b505050505b5050565b600080823b905060008111915050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8760405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f70726f7669646572000000000000000000000000000000000000000000000000815250600801915050604051602081830303815290604052805190602001208773ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613a8f57600080fd5b505af1158015613aa3573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8760405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7375627363726962657200000000000000000000000000000000000000000000815250600a01915050604051602081830303815290604052805190602001208673ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613bb057600080fd5b505af1158015613bc4573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e91db088760405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f656e64706f696e7400000000000000000000000000000000000000000000000081525060080191505060405160208183030381529060405280519060200120856040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613cbb57600080fd5b505af1158015613ccf573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e8995508760405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f757365725175657279000000000000000000000000000000000000000000000081525060090191505060405160208183030381529060405280519060200120846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613dde578082015181840152602081019050613dc3565b50505050905090810190601f168015613e0b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613e2b57600080fd5b505af1158015613e3f573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8760405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f73746174757300000000000000000000000000000000000000000000000000008152506006019150506040516020818303038152906040528051906020012060006002811115613f0557fe5b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613f4257600080fd5b505af1158015613f56573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8760405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f6f6e636861696e53756273637269626572000000000000000000000000000000815250601101915050604051602081830303815290604052805190602001208361401b57600061401e565b60015b6040518363ffffffff1660e01b8152600401808381526020018260ff16815260200192505050600060405180830381600087803b15801561405e57600080fd5b505af1158015614072573d6000803e3d6000fd5b50505050505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354c552db8260405160200180807f7175657269657300000000000000000000000000000000000000000000000000815250600701828152602001807f7374617475730000000000000000000000000000000000000000000000000000815250600601915050604051602081830303815290604052805190602001206001600281111561414057fe5b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561417d57600080fd5b505af1158015614191573d6000803e3d6000fd5b505050505056fe5375627363726962657220646f6573206e6f74206861766520616e7920646f74732ea265627a7a72315820aa2a1506f369b0e6683cb4ad763c92d2334240b78744e048b0214ac7d2af1b5b64736f6c63430005100032";

    public static final String FUNC_BONDAGE = "bondage";

    public static final String FUNC_BONDAGEADDRESS = "bondageAddress";

    public static final String FUNC_DB = "db";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SELFDESTRUCT = "selfDestruct";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEDEPENDENCIES = "updateDependencies";

    public static final String FUNC_QUERY = "query";

    public static final String FUNC_CANCELQUERY = "cancelQuery";

    public static final String FUNC_RESPONDBYTES32ARRAY = "respondBytes32Array";

    public static final String FUNC_RESPONDINTARRAY = "respondIntArray";

    public static final String FUNC_RESPOND1 = "respond1";

    public static final String FUNC_RESPOND2 = "respond2";

    public static final String FUNC_RESPOND3 = "respond3";

    public static final String FUNC_RESPOND4 = "respond4";

    public static final String FUNC_GETPROVIDER = "getProvider";

    public static final String FUNC_GETSUBSCRIBER = "getSubscriber";

    public static final String FUNC_GETENDPOINT = "getEndpoint";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETCANCEL = "getCancel";

    public static final String FUNC_GETUSERQUERY = "getUserQuery";

    public static final String FUNC_GETSUBSCRIBERONCHAIN = "getSubscriberOnchain";

    public static final Event CANCELEDREQUEST_EVENT = new Event("CanceledRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event FULFILLQUERY_EVENT = new Event("FulfillQuery", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event INCOMING_EVENT = new Event("Incoming", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OFFCHAINRESPONSE_EVENT = new Event("OffchainResponse", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event OFFCHAINRESPONSEINT_EVENT = new Event("OffchainResponseInt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Int256>>() {}));
    ;

    public static final Event OFFCHAINRESULT1_EVENT = new Event("OffchainResult1", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OFFCHAINRESULT2_EVENT = new Event("OffchainResult2", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OFFCHAINRESULT3_EVENT = new Event("OffchainResult3", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OFFCHAINRESULT4_EVENT = new Event("OffchainResult4", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REVERTCANCELATION_EVENT = new Event("RevertCancelation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }
    
    /**
     * Initializes a subclass of BaseContract that can access the methods of the Dispatch contract
     * @param type wrapper class NetworkProviderOptions for {int networkID, org.web3j.protocol.Web3j web3j, org.web3j.crypto.Credentials credentials, org.web3j.tx.gas.ContractGasProvider contractGasProvider}
     */
    protected Dispatch(NetworkProviderOptions type) throws Exception {
        super(BINARY, type, "DISPATCH");
    }

    /**
     * Initializes a subclass of BaseContract that can access the methods of the Dispatch contract
     * @param contractAddress       Addres of deployed Dispatch contract
     * @param web3j                 Instance of Web3j interacts with deployed contracts
     * @param credentials           Credential account data
     * @param contractGasProvider   Contract gas data
     */
    protected Dispatch(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) throws Exception {
        super(new BaseContractType(BINARY, contractAddress, web3j, credentials, contractGasProvider));
    }

    /**
     * Listens to cancel request events
     * @param transactionReceipt Log of transactions done with contracts
     */
    public List<CanceledRequestEventResponse> getCanceledRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELEDREQUEST_EVENT, transactionReceipt);
        ArrayList<CanceledRequestEventResponse> responses = new ArrayList<CanceledRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CanceledRequestEventResponse typedResponse = new CanceledRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CanceledRequestEventResponse> canceledRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CanceledRequestEventResponse>() {
            @Override
            public CanceledRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANCELEDREQUEST_EVENT, log);
                CanceledRequestEventResponse typedResponse = new CanceledRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CanceledRequestEventResponse> canceledRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, this.address);
        filter.addSingleTopic(EventEncoder.encode(CANCELEDREQUEST_EVENT));
        return canceledRequestEventFlowable(filter);
    }

    /**
     * Listens to fulfill query events
     * @param transactionReceipt Log of transactions done with contracts
     */
    public List<FulfillQueryEventResponse> getFulfillQueryEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FULFILLQUERY_EVENT, transactionReceipt);
        ArrayList<FulfillQueryEventResponse> responses = new ArrayList<FulfillQueryEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FulfillQueryEventResponse typedResponse = new FulfillQueryEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.endpoint = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FulfillQueryEventResponse> fulfillQueryEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FulfillQueryEventResponse>() {
            @Override
            public FulfillQueryEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FULFILLQUERY_EVENT, log);
                FulfillQueryEventResponse typedResponse = new FulfillQueryEventResponse();
                typedResponse.log = log;
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.endpoint = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FulfillQueryEventResponse> fulfillQueryEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FULFILLQUERY_EVENT));
        return fulfillQueryEventFlowable(filter);
    }


    /**
     * Listens to incoming events
     * @param transactionReceipt Log of transactions done with contracts
     */
    public List<IncomingEventResponse> getIncomingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INCOMING_EVENT, transactionReceipt);
        ArrayList<IncomingEventResponse> responses = new ArrayList<IncomingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IncomingEventResponse typedResponse = new IncomingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.query = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.endpoint = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endpointParams = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.onchainSubscriber = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IncomingEventResponse> incomingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IncomingEventResponse>() {
            @Override
            public IncomingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INCOMING_EVENT, log);
                IncomingEventResponse typedResponse = new IncomingEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.query = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.endpoint = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.endpointParams = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.onchainSubscriber = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IncomingEventResponse> incomingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INCOMING_EVENT));
        return incomingEventFlowable(filter);
    }

    /**
     * Listens to offchain response events
     * @param transactionReceipt Log of transactions done with contracts
     */
    public List<OffchainResponseEventResponse> getOffchainResponseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OFFCHAINRESPONSE_EVENT, transactionReceipt);
        ArrayList<OffchainResponseEventResponse> responses = new ArrayList<OffchainResponseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OffchainResponseEventResponse typedResponse = new OffchainResponseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.response = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OffchainResponseEventResponse> offchainResponseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OffchainResponseEventResponse>() {
            @Override
            public OffchainResponseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OFFCHAINRESPONSE_EVENT, log);
                OffchainResponseEventResponse typedResponse = new OffchainResponseEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.response = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OffchainResponseEventResponse> offchainResponseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OFFCHAINRESPONSE_EVENT));
        return offchainResponseEventFlowable(filter);
    }

    /**
     * Listen to offchain response events
     * @param transactionReceipt Log of transactions done with contracts
     */
    public List<OffchainResponseIntEventResponse> getOffchainResponseIntEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OFFCHAINRESPONSEINT_EVENT, transactionReceipt);
        ArrayList<OffchainResponseIntEventResponse> responses = new ArrayList<OffchainResponseIntEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OffchainResponseIntEventResponse typedResponse = new OffchainResponseIntEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.response = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OffchainResponseIntEventResponse> offchainResponseIntEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OffchainResponseIntEventResponse>() {
            @Override
            public OffchainResponseIntEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OFFCHAINRESPONSEINT_EVENT, log);
                OffchainResponseIntEventResponse typedResponse = new OffchainResponseIntEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.response = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OffchainResponseIntEventResponse> offchainResponseIntEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OFFCHAINRESPONSEINT_EVENT));
        return offchainResponseIntEventFlowable(filter);
    }

    /**
     * Listens to offchain result1 events
     * @param transactionReceipt Log of transactions done with contracts
     */
    public List<OffchainResult1EventResponse> getOffchainResult1Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OFFCHAINRESULT1_EVENT, transactionReceipt);
        ArrayList<OffchainResult1EventResponse> responses = new ArrayList<OffchainResult1EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OffchainResult1EventResponse typedResponse = new OffchainResult1EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OffchainResult1EventResponse> offchainResult1EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OffchainResult1EventResponse>() {
            @Override
            public OffchainResult1EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OFFCHAINRESULT1_EVENT, log);
                OffchainResult1EventResponse typedResponse = new OffchainResult1EventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OffchainResult1EventResponse> offchainResult1EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OFFCHAINRESULT1_EVENT));
        return offchainResult1EventFlowable(filter);
    }

    /**
     * Listens to offchain result2 events
     * @param transactionReceipt Log of transactions done wtih contracts
     */
    public List<OffchainResult2EventResponse> getOffchainResult2Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OFFCHAINRESULT2_EVENT, transactionReceipt);
        ArrayList<OffchainResult2EventResponse> responses = new ArrayList<OffchainResult2EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OffchainResult2EventResponse typedResponse = new OffchainResult2EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.response2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }


    public Flowable<OffchainResult2EventResponse> offchainResult2EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OffchainResult2EventResponse>() {
            @Override
            public OffchainResult2EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OFFCHAINRESULT2_EVENT, log);
                OffchainResult2EventResponse typedResponse = new OffchainResult2EventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.response2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OffchainResult2EventResponse> offchainResult2EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OFFCHAINRESULT2_EVENT));
        return offchainResult2EventFlowable(filter);
    }
    
    /**
     * Listens to offchain result3 events
     * @param transactionReceipt Log of transactions done wtih contracts
     */
    public List<OffchainResult3EventResponse> getOffchainResult3Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OFFCHAINRESULT3_EVENT, transactionReceipt);
        ArrayList<OffchainResult3EventResponse> responses = new ArrayList<OffchainResult3EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OffchainResult3EventResponse typedResponse = new OffchainResult3EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.response2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.response3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OffchainResult3EventResponse> offchainResult3EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OffchainResult3EventResponse>() {
            @Override
            public OffchainResult3EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OFFCHAINRESULT3_EVENT, log);
                OffchainResult3EventResponse typedResponse = new OffchainResult3EventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.response2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.response3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OffchainResult3EventResponse> offchainResult3EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OFFCHAINRESULT3_EVENT));
        return offchainResult3EventFlowable(filter);
    }

    /**
     * Listens to offchain result4 events
     * @param transactionReceipt Log of transactions done wtih contracts
     */
    public List<OffchainResult4EventResponse> getOffchainResult4Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OFFCHAINRESULT4_EVENT, transactionReceipt);
        ArrayList<OffchainResult4EventResponse> responses = new ArrayList<OffchainResult4EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OffchainResult4EventResponse typedResponse = new OffchainResult4EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.response2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.response3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.response4 = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OffchainResult4EventResponse> offchainResult4EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OffchainResult4EventResponse>() {
            @Override
            public OffchainResult4EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OFFCHAINRESULT4_EVENT, log);
                OffchainResult4EventResponse typedResponse = new OffchainResult4EventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.response1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.response2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.response3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.response4 = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OffchainResult4EventResponse> offchainResult4EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OFFCHAINRESULT4_EVENT));
        return offchainResult4EventFlowable(filter);
    }

    /**
     * Listens to ownership transferred events
     * @param transactionReceipt Log of transactions done wtih contracts
     */
    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    /**
     * Listens to offchain revert cancelation events
     * @param transactionReceipt Log of transactions done wtih contracts
     */
    public List<RevertCancelationEventResponse> getRevertCancelationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REVERTCANCELATION_EVENT, transactionReceipt);
        ArrayList<RevertCancelationEventResponse> responses = new ArrayList<RevertCancelationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RevertCancelationEventResponse typedResponse = new RevertCancelationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RevertCancelationEventResponse> revertCancelationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RevertCancelationEventResponse>() {
            @Override
            public RevertCancelationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REVERTCANCELATION_EVENT, log);
                RevertCancelationEventResponse typedResponse = new RevertCancelationEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.subscriber = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.provider = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RevertCancelationEventResponse> revertCancelationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVERTCANCELATION_EVENT));
        return revertCancelationEventFlowable(filter);
    }
    
    public RemoteFunctionCall<String> bondage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BONDAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> bondageAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BONDAGEADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> db() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> selfDestruct() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELFDESTRUCT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDependencies() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEDEPENDENCIES, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Queries data from a subscriber to oa given provider's endpoint
     * @param   provider        Address of the data provider
     * @param   userQuery       Subscriber given query string to be handled by provider
     * @param   endpoint        Data endpoint of provider, meant to determine how query is handled
     * @param   endpointParams  Params passed to data provider's endpoint
     * @return  A remote function call to Dispatch contract which returns the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> query(String provider, String userQuery, byte[] endpoint, List<byte[]> endpointParams) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_QUERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.Utf8String(userQuery), 
                new org.web3j.abi.datatypes.generated.Bytes32(endpoint), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(endpointParams, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Cancel a query with it's ID
     * @param   id  ID of query to cancel
     * @return  A remote function call to Dispatch contract which returns the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> cancelQuery(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CANCELQUERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Provider responds to a byte32 query received 
     * @param   id          ID of query
     * @param   response    List of responses returned by provider, length determines which dispatch response is called
     * @return  A remote function call to Dispatch contract which returns the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> respondBytes32Array(BigInteger id, List<byte[]> response) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPONDBYTES32ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(response, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Provider responds to a int (BigInteger) array query received
     * @param   id          ID of query
     * @param   response    List of BigInteger reponses returned by provider
     * @return  A remote function call to Dispatch contract which returns a transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> respondIntArray(BigInteger id, List<BigInteger> response) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPONDINTARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int256>(
                        org.web3j.abi.datatypes.generated.Int256.class,
                        org.web3j.abi.Utils.typeMap(response, org.web3j.abi.datatypes.generated.Int256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Provider responds to a query received
     * @param   id          ID of query
     * @param   response    A response returned by provider
     * @return  A remote function call to Dispatch contract which returns the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> respond(BigInteger id, String response) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPOND1, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Utf8String(response)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Provider responds to a query received
     * @param   id          ID of query
     * @param   response1   First response returned by provider
     * @param   response2   Second response returned by provider
     * @return  A remote function call to Dispatch contract which returns the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> respond(BigInteger id, String response1, String response2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPOND2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Utf8String(response1), 
                new org.web3j.abi.datatypes.Utf8String(response2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Provider responds to a query received
     * @param   id          ID of query
     * @param   response1   First response returned by provider
     * @param   response2   Second response returned by provider
     * @param   response3   Third response returned by provider
     * @return  A remote function call to Dispatch contract which returns the transaction receipt  
     */
    public RemoteFunctionCall<TransactionReceipt> respond(BigInteger id, String response1, String response2, String response3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPOND3, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Utf8String(response1), 
                new org.web3j.abi.datatypes.Utf8String(response2), 
                new org.web3j.abi.datatypes.Utf8String(response3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * @param   id          ID of query
     * @param   response1   First response returned by provider
     * @param   response2   Second response returned by provider
     * @param   response3   Third response returned by provider
     * @param   response4   Forth response returned by provider
     * @return  A remote function call to Dispatch contract which returns the transaction receipt 
     */
    public RemoteFunctionCall<TransactionReceipt> respond(BigInteger id, String response1, String response2, String response3, String response4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPOND4, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Utf8String(response1), 
                new org.web3j.abi.datatypes.Utf8String(response2), 
                new org.web3j.abi.datatypes.Utf8String(response3), 
                new org.web3j.abi.datatypes.Utf8String(response4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Get provider of this query id
     * @param   id  ID of query
     * @return  A remote function call to Dispatch contract which returns the provider's address
     */
    public RemoteFunctionCall<String> getProvider(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    /**
     * Get subscriber's address that submitted the query
     * @param   id  ID of query
     * @return  A remote function call to Dispatch contract which returns the subscriber's address
     */
    public RemoteFunctionCall<String> getSubscriber(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUBSCRIBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    /**
     * Get endpoint of the query
     * @param   id  ID of query
     * @return  A remote function call to Dispatch contract which returns the endpoint of the query
     */
    public RemoteFunctionCall<byte[]> getEndpoint(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENDPOINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    /**
     * Get status of query
     * @param   id  ID of query
     * @return  A remote function call to Dispatch contract which returns the status of the query
     */
    public RemoteFunctionCall<BigInteger> getStatus(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    /**
     * Get status if a query is cancelled
     * @param   id  ID of query
     * @return  A remote funnction call to Dispatch contract which returns the status if a query is cancelled
     */
    public RemoteFunctionCall<BigInteger> getCancel(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCANCEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getUserQuery(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERQUERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    /**
     * Get information about onchain or offchain subscriber of this query
     * @param   id  ID of query
     * @return  A remote function call to Dispatch contract which returns if offchain or onchain
     */
    public RemoteFunctionCall<Boolean> getSubscriberOnchain(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUBSCRIBERONCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public static Dispatch load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) throws Exception {
        return new Dispatch(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Dispatch load(NetworkProviderOptions type) throws Exception {
        return new Dispatch(type);
    }

    public static RemoteCall<Dispatch> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String c) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(c)));
        return deployRemoteCall(Dispatch.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Dispatch> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String c) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(c)));
        return deployRemoteCall(Dispatch.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Override
    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    /**
     * Event object for canceled request events
     */
    public static class CanceledRequestEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;
    }

    /**
     * Event object for fulfill query events
     */
    public static class FulfillQueryEventResponse extends BaseEventResponse {
        public String subscriber;

        public String provider;

        public byte[] endpoint;
    }

    /**
     * Event object for incoming events
     */
    public static class IncomingEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String provider;

        public String subscriber;

        public String query;

        public byte[] endpoint;

        public List<byte[]> endpointParams;

        public Boolean onchainSubscriber;
    }

    /**
     * Event object for offchain response events
     */
    public static class OffchainResponseEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;

        public List<byte[]> response;
    }

    /**
     * Event object for offchain response int events
     */
    public static class OffchainResponseIntEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;

        public List<BigInteger> response;
    }

    /**
     * Event object for offchain result1 events
     */
    public static class OffchainResult1EventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;

        public String response1;
    }

    /**
     * Event object for offchain result2 events
     */
    public static class OffchainResult2EventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;

        public String response1;

        public String response2;
    }

    /**
     * Event object for offchain result3 events
     */
    public static class OffchainResult3EventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;

        public String response1;

        public String response2;

        public String response3;
    }

    /**
     * Event object for offchain result4 events
     */
    public static class OffchainResult4EventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;

        public String response1;

        public String response2;

        public String response3;

        public String response4;
    }

    /**
     * Event object for ownership transferred events
     */
    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    /**
     * Event object for rever cancelation events
     */
    public static class RevertCancelationEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String subscriber;

        public String provider;
    }
}
