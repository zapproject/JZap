package io.github.zapproject.jzap.wrappers;

import io.github.zapproject.jzap.BaseContract;
import io.github.zapproject.jzap.types.BaseContractTypes.BaseContractType;
import io.github.zapproject.jzap.types.BaseContractTypes.NetworkProviderOptions;
import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;


/**
 * Manage Providers and Curves registration
 */
@SuppressWarnings("rawtypes")
public class Registry extends BaseContract {
    public static final String BINARY = "";

    public static final String FUNC_DB = "db";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SELFDESTRUCT = "selfDestruct";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEDEPENDENCIES = "updateDependencies";

    public static final String FUNC_INITIATEPROVIDER = "initiateProvider";

    public static final String FUNC_INITIATEPROVIDERCURVE = "initiateProviderCurve";

    public static final String FUNC_STRINGTOBYTES32 = "stringToBytes32";

    public static final String FUNC_SETPROVIDERPARAMETER = "setProviderParameter";

    public static final String FUNC_GETPROVIDERPARAMETER = "getProviderParameter";

    public static final String FUNC_GETALLPROVIDERPARAMS = "getAllProviderParams";

    public static final String FUNC_SETENDPOINTPARAMS = "setEndpointParams";

    public static final String FUNC_SETPROVIDERTITLE = "setProviderTitle";

    public static final String FUNC_CLEARENDPOINT = "clearEndpoint";

    public static final String FUNC_GETPROVIDERPUBLICKEY = "getProviderPublicKey";

    public static final String FUNC_GETPROVIDERTITLE = "getProviderTitle";

    public static final String FUNC_GETPROVIDERCURVE = "getProviderCurve";

    public static final String FUNC_GETPROVIDERCURVELENGTH = "getProviderCurveLength";

    public static final String FUNC_ISPROVIDERINITIATED = "isProviderInitiated";

    public static final String FUNC_GETPUBLICKEY = "getPublicKey";

    public static final String FUNC_GETTITLE = "getTitle";

    public static final String FUNC_GETPROVIDERENDPOINTS = "getProviderEndpoints";

    public static final String FUNC_GETENDPOINTPARAMS = "getEndpointParams";

    public static final String FUNC_GETENDPOINTBROKER = "getEndpointBroker";

    public static final String FUNC_GETCURVEUNSET = "getCurveUnset";

    public static final String FUNC_GETORACLEADDRESS = "getOracleAddress";

    public static final String FUNC_GETALLORACLES = "getAllOracles";

    public static final Event NEWCURVE_EVENT = new Event("NewCurve", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event NEWPROVIDER_EVENT = new Event("NewProvider", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    /**
     * Contructor for Registry
     * @param type Wrapper class NetworkProviderOptions for {int networkID, org.web3j.protocol.Web3j web3j, org.web3j.crypto.Credentials credentials, org.web3j.tx.gas.ContractGasProvider contractGasProvider}
     */
    protected Registry(NetworkProviderOptions type) throws Exception {
        super(BINARY, type, "REGISTRY");
    }

    /**
     * Contructor for Registry
     * @param   contractAddress     Address of deployed contract
     * @param   web3j               Instance of Web3j interacting with contracts
     * @param   credentials         Credentials account data
     * @param   contractGasProvider Contract gas data
     */
    protected Registry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) throws Exception {
        super(new BaseContractType(BINARY, contractAddress, web3j, credentials, contractGasProvider));
    }

    /**
     * Listens to new curve events emitted by Registry contract
     * @param   transactionReceipt  Log of transactions done on the contract
     * @return  List of new curve events
     */
    public List<NewCurveEventResponse> getNewCurveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCURVE_EVENT, transactionReceipt);
        ArrayList<NewCurveEventResponse> responses = new ArrayList<NewCurveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewCurveEventResponse typedResponse = new NewCurveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.endpoint = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.broker = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.curve = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewCurveEventResponse> newCurveEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewCurveEventResponse>() {
            @Override
            public NewCurveEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWCURVE_EVENT, log);
                NewCurveEventResponse typedResponse = new NewCurveEventResponse();
                typedResponse.log = log;
                typedResponse.provider = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.endpoint = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.broker = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.curve = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewCurveEventResponse> newCurveEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWCURVE_EVENT));
        return newCurveEventFlowable(filter);
    }

    /**
     * Listens to new provider events emitted by Registry contract
     * @param   transactionReceipt  Log of transactions done on the contract
     * @return  List of new provider events
     */
    public List<NewProviderEventResponse> getNewProviderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPROVIDER_EVENT, transactionReceipt);
        ArrayList<NewProviderEventResponse> responses = new ArrayList<NewProviderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewProviderEventResponse typedResponse = new NewProviderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.provider = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.title = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewProviderEventResponse> newProviderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewProviderEventResponse>() {
            @Override
            public NewProviderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPROVIDER_EVENT, log);
                NewProviderEventResponse typedResponse = new NewProviderEventResponse();
                typedResponse.log = log;
                typedResponse.provider = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.title = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewProviderEventResponse> newProviderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPROVIDER_EVENT));
        return newProviderEventFlowable(filter);
    }

    /**
     * Listens to ownership transferred events emitted by Registry contract
     * @param   transactionReceipt  Log of transactions done on the contract
     * @return  List of ownership transferred events
     */
    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public RemoteFunctionCall<String> db() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> selfDestruct() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELFDESTRUCT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDependencies() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEDEPENDENCIES, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Initializes a brand endpoint in the Registry contract, creating an Oracle entry if needed.
     * @param   publicKey   A public key identifier for this oracle
     * @param   title       A descriptor describing what data this oracle provide
     * @return  A remote function call to Registry contract which return the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> initiateProvider(BigInteger publicKey, byte[] title) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIATEPROVIDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(publicKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(title)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Initialies a piecewise curve for a given provider's endpoint
     * @param   endpoint    Data endpoint of the provider
     * @param   curve       A piecewise curve
     * @param   broker      The address allowed to bond/unbond; if 0, any address allowed
     * @return  A remote function call to Registry contract which return the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> initiateProviderCurve(byte[] endpoint, List<BigInteger> curve, String broker) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIATEPROVIDERCURVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(endpoint), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int256>(
        org.web3j.abi.datatypes.generated.Int256.class,
        org.web3j.abi.Utils.typeMap(curve, org.web3j.abi.datatypes.generated.Int256.class)),
                new org.web3j.abi.datatypes.Address(broker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Converts a String to byte[32]
     * @param   source  String to convert
     * @return  A remote function call which returns the converted byte[32]
     */
    public RemoteFunctionCall<byte[]> stringToBytes32(String source) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STRINGTOBYTES32, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(source)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    /**
     * Set the parameter of a provider
     * @param   key     The key to be set
     * @param   value   The value to set the key to
     * @return  A remote function call to Registry contract which return the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> setProviderParameter(byte[] key, byte[] value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROVIDERPARAMETER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(key), 
                new org.web3j.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Get a parameter from a provider
     * @param   provider    Address of the provider
     * @param   key         The key identifier of the provider
     * @return  A remote function call which returns the value of the key
     */
    public RemoteFunctionCall<byte[]> getProviderParameter(String provider, byte[] key) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERPARAMETER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Bytes32(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    /**
     * Get all the parameters of a provider
     * @param   provider    Address of the provider
     * @return  A remote function call which returns a list of keys
     */
    public RemoteFunctionCall<List> getAllProviderParams(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLPROVIDERPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    /**
     * Initializes endpoint params for an endpoint. Can only be called by the owner of this oracle
     * @param   endpoint        Data endpoint of this provider
     * @param   endpointParams  The parameters that this endpoint accepts as query arguments
     * @return  A remote function call to Registry contract which return the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> setEndpointParams(byte[] endpoint, List<byte[]> endpointParams) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETENDPOINTPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(endpoint), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(endpointParams, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProviderTitle(byte[] title) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROVIDERTITLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(title)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Clear endpoint
     * @param   endpoint    Data endpoint of this provider
     * @return  A remote function call to Registry contract which return the transaction receipt
     */
    public RemoteFunctionCall<TransactionReceipt> clearEndpoint(byte[] endpoint) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEARENDPOINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(endpoint)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Gets the specified provider's public key
     * @param    provider    Address of this provider
     * @return  A remote function call which returns the public key of specified provider  
     */
    public RemoteFunctionCall<BigInteger> getProviderPublicKey(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERPUBLICKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    /**
     * Gets the specified provider's title
     * @param   provider    Addres of this provider
     * @return  A remote function call which returns the title of this provider
     */
    public RemoteFunctionCall<byte[]> getProviderTitle(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERTITLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    /**
     * Get a provider's endpoint's curve from the Registry contract
     * @param   provider    Addres of this provider
     * @param   endpoint    Data endpoint of this provider
     * @return  A remote function call which returns the curve
     */
    public RemoteFunctionCall<List> getProviderCurve(String provider, byte[] endpoint) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERCURVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Bytes32(endpoint)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    /**
     * Get the provider curve length
     * @param   provider    Addres of this provider
     * @param   endpoint    Data endpoint of this provider
     * @return  A remote function call which returns the curve length of this provider
     */
    public RemoteFunctionCall<BigInteger> getProviderCurveLength(String provider, byte[] endpoint) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERCURVELENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Bytes32(endpoint)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    /**
     * Checks whether this provider is initiated
     * @param   oracleAddress   Address of this provider
     * @return  A remote function call which returns whether this provider is initiated
     */
    public RemoteFunctionCall<Boolean> isProviderInitiated(String oracleAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISPROVIDERINITIATED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(oracleAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    /**
     * Gets the public key of this provider
     * @param   provider    Address of this provider
     * @return  A remote function call which returns the public key of this provider
     */
    public RemoteFunctionCall<BigInteger> getPublicKey(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPUBLICKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    /**
     * Gets the title of this provider
     * @param   provider    Address of this provider
     * @return  A remote function call which returns the title of this provider
     */
    public RemoteFunctionCall<byte[]> getTitle(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTITLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    /**
     * Get the endpoints of a given provider
     * @param   provider    Addres of this provider
     * @return  A remote funcation call which returns a list of endpoints of the provider
     */
    public RemoteFunctionCall<List> getProviderEndpoints(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERENDPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    /**
     * Get the endpoint params at a certain index of a provider's endpoint
     * @param   provider    Address of this provider
     * @param   endpoint    Data endpoint of this provider
     * @return  A remote function call which returns the endpoint params of this provider
     */
    public RemoteFunctionCall<List> getEndpointParams(String provider, byte[] endpoint) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENDPOINTPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Bytes32(endpoint)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    /**
     * Get a provider endpoint's broker address
     * @param   oracleAddress   Address of this provider
     * @param   endpoint        Data endpoint of this provider
     * @return  A remote function call which returns the broker address of this endpoint
     */
    public RemoteFunctionCall<String> getEndpointBroker(String oracleAddress, byte[] endpoint) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENDPOINTBROKER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(oracleAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(endpoint)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    /**
     * Get the endpoint params at a certain index of a provider's endpoint
     * @param   provider    Address of this provider
     * @param   endpoint    Data endpoint of this parameter
     * @return  Whether this endpoint is set
     */
    public boolean isEndpointSet(String provider, byte[] endpoint) throws Exception {
        return !getCurveUnset(provider, endpoint).send();
    }

    public RemoteFunctionCall<Boolean> getCurveUnset(String provider, byte[] endpoint) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCURVEUNSET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Bytes32(endpoint)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getOracleAddress(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETORACLEADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getAllOracles() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLORACLES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    /**
     * Wrapper to initialize a deployed Registry contract
     * @param   contractAddress     Address of deployed contract
     * @param   web3j               Instance of Web3j interacting with contracts
     * @param   credentials         Credentials account data
     * @param   contractGasProvider Contract gas data
     * @return  Registry contract
     */
    public static Registry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) throws Exception {
        return new Registry(contractAddress, web3j, credentials, contractGasProvider);
    }
    
    /**
     * Wrapper to initialize a deployed Registry contract
     * @param   type Wrapper class NetworkProviderOptions for {int networkID, org.web3j.protocol.Web3j web3j, org.web3j.crypto.Credentials credentials, org.web3j.tx.gas.ContractGasProvider contractGasProvider}
     * @return  Registry contract
     */
    public static Registry load(NetworkProviderOptions type) throws Exception {
        return new Registry(type);
    }

    /**
     * Deploys a new Registry contract for testing
     */
    public static RemoteCall<Registry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String c) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(c)));
        return deployRemoteCall(Registry.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    /**
     * Deplots a new Registry contract for testing
     */
    public static RemoteCall<Registry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String c) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(c)));
        return deployRemoteCall(Registry.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Override
    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    /**
     * Wrapper object for new curve events
     */
    public static class NewCurveEventResponse extends BaseEventResponse {
        public String provider;

        public byte[] endpoint;

        public String broker;

        public List<BigInteger> curve;
    }

    /**
     * Wrapper object for new provider events
     */
    public static class NewProviderEventResponse extends BaseEventResponse {
        public String provider;

        public byte[] title;
    }

    /**
     * Wrapper object for ownership transferred events
     */
    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
